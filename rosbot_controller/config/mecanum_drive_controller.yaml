controller_manager:
  ros__parameters:
    use_sim_time: false
    update_rate: 20 # Hz

    joint_state_broadcaster:
      type: joint_state_broadcaster/JointStateBroadcaster
    rosbot_base_controller:
      type: mecanum_drive_controller/MecanumDriveController
    imu_broadcaster:
      type: imu_sensor_broadcaster/IMUSensorBroadcaster

# Separate controller manager used for simulation - only difference is
# the use_sim_time parameter (it is the easiest way to do it with ign ros2 control)
simulation_controller_manager:
  ros__parameters:
    use_sim_time: true
    update_rate: 20 # Hz

    joint_state_broadcaster:
      type: joint_state_broadcaster/JointStateBroadcaster
    rosbot_base_controller:
      type: mecanum_drive_controller/MecanumDriveController
    imu_broadcaster:
      type: imu_sensor_broadcaster/IMUSensorBroadcaster

imu_broadcaster:
  ros__parameters:
    sensor_name: "imu"
    frame_id: "imu_link"

rosbot_base_controller:
  ros__parameters:
    front_left_wheel_name: fl_wheel_joint
    front_right_wheel_name: fr_wheel_joint
    rear_left_wheel_name: rl_wheel_joint
    rear_right_wheel_name: rr_wheel_joint

    wheel_separation_x: 0.106
    wheel_separation_y: 0.192
    wheel_radius: 0.047


    wheel_separation_multiplier_x: 1.0
    wheel_separation_multiplier_y: 1.0

    wheel_radius_multiplier: 1.0

    # Feedback from motors is published at around 20 Hz
    publish_rate: 25.0
    odom_frame_id: odom
    base_frame_id: base_link
    pose_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.01]
    twist_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.01]

    # Whether to use feedback or commands for odometry calculations
    open_loop: false

    # Update odometry from velocity
    # in sensor fusion only velocity is used and with this setting it is more accurate
    position_feedback: false
    # velocity computation filtering
    velocity_rolling_window_size: 1

    enable_odom_tf: false

    cmd_vel_timeout: 0.5
    #publish_limited_velocity: true
    use_stamped_vel: false

    # Velocity and acceleration limits
    # Whenever a min_* is unspecified, default to -max_*
    linear:
      x:
        has_velocity_limits: true
        has_acceleration_limits: true
        has_jerk_limits: false
        # top speed is around 1.2m/s
        max_velocity: 0.9 # m/s
        # min_velocity -  When unspecified, -max_velocity is used
        max_acceleration: 1.0 # m/s^2
        # min_acceleration - When unspecified, -max_acceleration is used.
        max_jerk: 0.0 # m/s^3
      y:
        has_velocity_limits: true
        has_acceleration_limits: true
        has_jerk_limits: false
        # top speed is around 1.2m/s
        max_velocity: 0.9 # m/s
        # min_velocity -  When unspecified, -max_velocity is used
        max_acceleration: 1.0 # m/s^2
        # min_acceleration - When unspecified, -max_acceleration is used.
        max_jerk: 0.0 # m/s^3

    angular:
      z:
        has_velocity_limits: true
        has_acceleration_limits: true
        has_jerk_limits: false
        max_velocity: 3.0 # rad/s
        # min_velocity -  When unspecified, -max_velocity is used
        max_acceleration: 4.0 # rad/s^2
        # min_acceleration - When unspecified, -max_acceleration is used.
        max_jerk: 0.0 # rad/s^3
